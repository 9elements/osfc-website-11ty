{"count":37,"next":"https://pretalx.com/api/events/osfc2020/talks/?limit=25&offset=25","previous":null,"results":[{"code":"YWWRVG","speakers":[{"code":"KANXHE","name":"Bin Gao","biography":"AWS BIOS engineer.","avatar":null}],"title":"SeaBIOS as CSM on physical hardware","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"*Time is show in CET*\r\nSeaBIOS is generally used as CSM on QEMU to boot legacy OS with UEFI BIOS. However, to achieve the same goal on physical hardware is not straightforward and we're facing challenges. We're able to overcome all these challenges and successfully boot legacy OS almost  from all kinds of medias(SATA, NVMe, PXE, etc,) by applying various extension and subtle changes on physical server computers. In this presentation, we'll highlight the changes and extensions we made on SeaBIOS. For example,  PCI rom BEV(e.g. iPXE) boot support, 64bit MMIO support by BIOS provided SMM, >128K pci oprom memory support, boot event log sent to BIOS(by SMI), VGA console to Serial console redirection, map hard drives dynamically to support more than 2 hard drives, timer/clock fix to support pci rom dispatching, and so on.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T21:15:00+01:00","end":"2020-12-03T21:30:00+01:00"},"image":null,"resources":[]},{"code":"BFTSBT","speakers":[{"code":"JRPZFZ","name":"Gabriel Biren","biography":"Gabriel Biren is a student at UCLA, currently working on a Master's in Computer Science.","avatar":"https://pretalx.com/media/avatars/2614189645596154374_GHWcxDY.jpg"},{"code":"9JRV3P","name":"Shiyu Xu","biography":"A student at USC, currently working on a Master's in Computer Science.","avatar":"https://pretalx.com/media/avatars/%E5%8F%AF%E5%81%9A%E5%A4%B4%E5%83%8F_gQ1W0Oi.jpg"}],"title":"Webboot","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"`webboot` is an open-source tool to boot live ISO images from the web. Users have the option to set up a wifi connection and download a new ISO, or use a previously downloaded one. Once the ISO exists locally, _Webboot_ locates its kernel and initrd, determines the necessary kernel parameters to boot, and uses kexec to boot into the new distribution. _Webboot_ was introduced at last year’s OSFC, but several major changes, including the addition of a text-based UI and a cache of previously downloaded ISOs, have significantly increased the tool’s usability.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T19:45:00+01:00","end":"2020-12-03T20:00:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/BFTSBT/resources/Webboot_Slides_aGKJuXY.pdf","description":"Slides"}]},{"code":"MCJASB","speakers":[{"code":"9DMPTB","name":"Michael Kubacki","biography":"Michael Kubacki is a firmware engineer at Microsoft currently focused on FW/OS interaction and core UEFI features in Azure and Surface. Michael previously worked on system integration and firmware development at Intel across several generations of mobile SoC, client, and server products. He is an advocate for open source software and bringing more production firmware code into open source.","avatar":"https://pretalx.com/media/avatars/kubacki_michael_osfc_2020_901n1iu.jpg"}],"title":"PRM: SMM Goes on a Diet","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"System Management Mode (SMM), often referred to as ring -2, is an operating mode in x86 computer architecture that is notoriously difficult to debug and secure. To system software including the hypervisor and kernel, SMM is a lurking black box that can asynchronously take control of all system processors for an arbitrary duration of time leading to unpredictable performance degradation. SMM code is stored on non-volatile storage such as SPI flash and loaded during firmware boot alongside other UEFI code. Over time, SMM’s ubiquity and power has attracted platform manufacturers to accumulate implementations in SMM for a growing amount of technologies that require low-level chipset access.\r\n\r\nPlatform Runtime Mechanism (PRM) is a feature that reverses this trend. It transitions code out of SMM and into the execution context of the OS/VMM by taking advantage of the fact that some code doesn’t require SMM privileges. PRM handlers execute in ring 0 just like other kernel code and can be updated in the OS without resetting the system. Developed in collaboration between Intel and Microsoft, SMI handlers are being ported to PRM handlers today. This talk will primarily discuss the fully open source UEFI code made available for any platform vendor to painlessly enable PRM in their system firmware. It will also cover changes in the ACPI Specification, the open source ACPICA iASL compiler and operating systems such as Linux and Windows to add support for PRM.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T17:30:00+01:00","end":"2020-12-01T18:00:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/MCJASB/resources/OSFC_2020_-_Michael_Kubacki_-_Platform_Runtime_Mec_feU6m4i.pdf","description":"Presentation"}]},{"code":"TBSHA8","speakers":[{"code":"AQF8VK","name":"ronald g. minnich","biography":"Ron has worked in free and open source for decades, and, along the way, started linuxbios, helped found coreboot, created u-root, and helped found linuxboot. He's also very active in the plan 9 and other kernel communities.","avatar":null}],"title":"pure open source on an AMD Zen","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"This talk will discuss project X, which is aimed at eXcising binary blobs from the x86 part of Zen CPUs.  These parts start with fully functional memory, courtesy the ASP (which is a bit slow to get it done, but it gets it done). Getting memory working is just about the hardest part of bringing up a platform. Since the x86 is released from reset with memory working, things are easier.\r\n\r\nIn this talk I'll go over how we got to our goal, with both oreboot and coreboot, and why we might prefer one over the other.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T19:45:00+01:00","end":"2020-12-02T20:15:00+01:00"},"image":null,"resources":[]},{"code":"UYQSG9","speakers":[{"code":"AQF8VK","name":"ronald g. minnich","biography":"Ron has worked in free and open source for decades, and, along the way, started linuxbios, helped found coreboot, created u-root, and helped found linuxboot. He's also very active in the plan 9 and other kernel communities.","avatar":null},{"code":"XXVHBR","name":"Ryan O'Leary","biography":null,"avatar":null}],"title":"oreboot status report","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"oreboot is a downstream fork of coreboot, with all C removed, and all code written in Rust. Since we spoke of oreboot a year ago, a lot has happened, and we want to go over the status.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T00:00:00+01:00","end":"2020-12-03T00:30:00+01:00"},"image":null,"resources":[]},{"code":"KMG73N","speakers":[{"code":"QASVGG","name":"Vernon Mauery","biography":"Vernon has been working on BMC firmware for Intel for nearly 10 years. Proprietary firmware at first, and  now OpenBMC. His main areas of focus are crypto, security, and bootloaders, but he also dabbles in Linux kernel, and other parts of OpenBMC as well. He is also one of the maintainers for the OpenBMC IPMI stack.","avatar":null},{"code":"SVSWZA","name":"Zhikui Ren","biography":"BMC Firmware engineer","avatar":null}],"title":"Trusted Execution Environment on OpenBMC","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"Adding a Trusted Execution Environment (TEE) to OpenBMC will allow for a\r\nvariety of useful features in the realm of security. One current feature the\r\nBMC suffers from is the ability to securely store any information. A glaring\r\nexample of this is that IPMI user passwords are required (by the specification)\r\nto be available as plain-text to be used in RMCP+ authentication. But because\r\nthe BMC currently has no method of securing any secrets, it is impossible to\r\nsecurely encrypt those passwords. Adding a TEE using the ARM TrustZone\r\nextensions will allow this exact scenario to be fixed. But adding a TEE isn't\r\nso simple as just adding a new package to the OpenBMC Yocto build. This talk\r\ndives into the details of what hardware requirements, boot requirements, and\r\nother prerequisites are necessary to be able to securely store secrets on the\r\nBMC. In addition, it looks to future work that can be done with a TEE besides\r\nsimply keeping secrets.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T14:45:00+01:00","end":"2020-12-02T15:15:00+01:00"},"image":null,"resources":[]},{"code":"ALPB3Y","speakers":[{"code":"EU9GLW","name":"Christian Walter","biography":"Firmware Developer - Security Researcher","avatar":"https://pretalx.com/media/avatars/cwalter_portraet_2wefGb6.jpg"}],"title":"Project Mu","submission_type":{"en":"Session"},"track":null,"state":"confirmed","abstract":"Project Mu Session with Jeremiah Cox","description":null,"duration":40,"slot_count":1,"do_not_record":false,"is_featured":false,"content_locale":"en","slot":{"room":{"en":"Session Area"},"start":"2020-12-03T20:55:00+01:00","end":"2020-12-03T21:35:00+01:00"},"image":null,"resources":[]},{"code":"TXRLWR","speakers":[{"code":"NQXLUJ","name":"Jean-Marie Verdun","biography":"Jean-Marie Verdun is Senior Strategist Open Platform at HPE since december 2019. Before joining HPE, he created his own company in 2006 dedicated to energy management in IT and Open Hardware platforms that he successfully sold in 2018. He actively participated to the early stage of linuxboot and is a long term contributor to various open source tools like FreeCAD used to design Open Hardware platforms.","avatar":null}],"title":"Linuxboot on HPE platform where do we stand","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"During this talk, I will introduce my ongoing work to port linuxboot on HPE platforms. The various strategies taken, the challenges we face and how we will address them. A live demo of linuxboot on HPE platform will be performed.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T21:15:00+01:00","end":"2020-12-02T21:30:00+01:00"},"image":null,"resources":[]},{"code":"BDJTMQ","speakers":[{"code":"DMZWKT","name":"Richard Hughes","biography":"Richard has over 15 years of experience developing open source software. He is the maintainer of fwupd, the LVFS, GNOME Software, AppStream-glib, PackageKit, gnome-packagekit, gnome-power-manager, gnome-color-manager, colord, and UPower and also contributes to many other projects and opensource standards.\r\n\r\nRichard graduated in 2007 from the University of Surrey with a Masters in Electronics Engineering. He now works as a principle engineer for Red Hat. Richard's outside interests include taking photos, eating good food and looking after his two daughters.","avatar":null}],"title":"Why LVFS is Essential for OEMs","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"The Linux Vendor Firmware Service is a webapp used by OEMs, ODMs and ISVs to distribute firmware updates safely and securely to millions of Linux users. In this talk I will give a quick overview of what the LVFS actually is, the extra services it provides and describe the ways the Linux client communicates with the server. I’ll explain how the LVFS is essential for OEMs and why ignoring the LVFS and Linux users is short-sighted from a technical and business point of view.\r\n\r\nIn the talk I’ll show lots of pictures and graphs, which will make some vendors feel good, and make other vendors feel bad. I’ll include lots of technical details that might be interesting to OEMs and Linux users who are deploying firmware updates at scale.\r\n\r\nDuring the talk I’ll also hint at a future specification we’re working on, designed to raise the level of firmware security across the entire ecosystem. The talk will finish with a look to the future.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T14:15:00+01:00","end":"2020-12-01T14:45:00+01:00"},"image":null,"resources":[]},{"code":"SLFJTN","speakers":[{"code":"YMDVAF","name":"Jiewen Yao","biography":"Jiewen Yao is a principal engineer in the Intel Architecture, Graphics, and Software Group. He has been engaged as a firmware developer for over 15 years. He is a member of the UEFI Security sub team, and the TCG PC Client sub working group. He is the maintainer of tianocore/EDKII security package and crypto package.","avatar":"https://pretalx.com/media/avatars/picture_SoN8QOs.jpg"},{"code":"PSYZCP","name":"Vincent Zimmer","biography":"Vincent is an engineer working on firmware in the Pacific Northwest. He has been on the EFI team at Intel since the late 90's.","avatar":"https://pretalx.com/media/avatars/vzimmer_r41603j.jpg"}],"title":"Enabling Rust for UEFI Firmware","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"This talk will introduce some work in progress activities to enable Rust in EDK II.\r\nThe session will include use cases for Rust in EDK II, advantages of Rust when applied to firmware components, limitations in firmware environments and the types of issues that can be avoided by leveraging language based security in EDK II. Memory safety issues contributed to approximately 70% of recent security issues in software (per MS). In firmware, over 50% of reported issues in EDK II open source are related to memory safety. Future looking directions will also be shared.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T19:00:00+01:00","end":"2020-12-03T19:30:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/SLFJTN/resources/OSFC2020_Rust_EFI_Yao_Zimmer_NDK4Dme.pdf","description":"Presentation"}]},{"code":"YQDJGJ","speakers":[{"code":"7KGSHZ","name":"Trammell Hudson","biography":"I like to take things apart.","avatar":"https://pretalx.com/media/avatars/Screenshot_from_2020-09-03_04-52-02_pby9eGu.png"}],"title":"Bootling Linux more safely with safeboot","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"Configuring all of the pieces for UEFI Secure Boot, generating keys in hardware tokens, signing kernels, integrating LUKS disk encryption with the TPM, and remotely attesting to the state of the system is very complex, yet vital part of locking down laptops and servers against adversaries. Users and administrators need a tool that wraps up all of the complexity into the few operations that they need from day to day: signing new kernels, decrypting their disks at boot, protecting the system from runtime attackers, attesting to the integrity of their systems, and so on. safeboot and tpm2-attest are (early versions of) those tools!","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T16:45:00+01:00","end":"2020-12-01T17:15:00+01:00"},"image":null,"resources":[]},{"code":"XLBNJP","speakers":[{"code":"NTVYJH","name":"Sumeet Pawnikar","biography":"Sumeet Pawnikar is working as senior system software developer at Intel. \r\nHe has majorly worked on embedded systems, Android OS based Smartphone and Tablet devices for Linux BSP development. He has widely worked on ARM and IA architecture. He has over 14 years of experience in open source software development. \r\nLast 4+ years working on overall system thermal management for various Intel SoC based Chrome OS projects, this includes firmware, kernel/OS and application interaction. He has been involved in design, development and implementation of thermal policies along with enablement and tuning thermal policies on Intel Chrome reference boards and support various OEM/ODM designs.","avatar":"https://pretalx.com/media/avatars/Sumeet-photo_UFJU1JO.jpg"},{"code":"YZBZFU","name":"Timothy Wawrzynczak","biography":"Tim has nearly 15 years experience in firmware, including: automated welding machines, adding WiFi to Things, wireless consumer electronics, automated liquid chromotography, safety-critical systems, 3-phase power monitoring & voltage sag correction, robotics & machine vision, and now works on firmware for Chrome OS devices.","avatar":null}],"title":"coreboot Thermal Management on Intel based systems","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"In today's smart computing platforms, a thermal management solution needs to be reliable and sustainable on various set of devices like 2-in-1s or tablets, client or edge and even on IOT devices. This presentation talks about the thermal management code flow in coreboot firmware for Intel SoC-based Chrome systems and the major thermal code clean, in which years of technical debt was cleaned up.  In addition, coreboot introduced a new DPTF driver which replaces the static ASL policy files and generates SSDT-based thermal policy table at runtime. This eases the enablement and tuning processes for thermal policies to ensure the best end-user experience on the system.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T16:15:00+01:00","end":"2020-12-01T16:30:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/XLBNJP/resources/coreboot_Thermal_Management_on_Intel_based_systems_lDkKEY5.pdf","description":"Slides"}]},{"code":"SXYUQD","speakers":[{"code":"H3RYF8","name":"Jack Rosenthal","biography":"Jack works at Google on the Chrome OS team on open source firmware projects. Jack has a BS and MS in Computer Science from Colorado School of Mines.","avatar":"https://pretalx.com/media/avatars/skiing_4pts_XkJwoy5.jpg"},{"code":"ZZDUXC","name":"Paul Fagerburg","biography":"Paul has been at Google for about 1.5 years, working on embedded firmware in ChromeOS. Prior to joining Google, Paul worked at a variety of large and small companies in areas including medical devices, commercial aviation, and military systems. Paul holds a BS in Computer Science and an MS in Electrical Engineering.","avatar":"https://pretalx.com/media/avatars/IMG_20190219_152524095_BURST000_COVER_TOP_PxcdUHs.jpg"}],"title":"Zephyr as an open platform for Google's embedded controllers","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"Since 2012, Google has developed an open source embedded controller for Chromebooks. Recently, Google has committed to use Zephyr OS in future embedded controller designs. We discuss the benefits of moving to a community-driven RTOS instead of using our custom kernel. We also discuss Google’s plans to contribute to Zephyr OS.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T00:45:00+01:00","end":"2020-12-03T01:00:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/SXYUQD/resources/osfc_2020_presentation_URekIol.pdf","description":"Slides"}]},{"code":"CRKZB8","speakers":[{"code":"YMDVAF","name":"Jiewen Yao","biography":"Jiewen Yao is a principal engineer in the Intel Architecture, Graphics, and Software Group. He has been engaged as a firmware developer for over 15 years. He is a member of the UEFI Security sub team, and the TCG PC Client sub working group. He is the maintainer of tianocore/EDKII security package and crypto package.","avatar":"https://pretalx.com/media/avatars/picture_SoN8QOs.jpg"}],"title":"Virtual Firmware for Intel® Trust Domain Extensions","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"Intel® Trust Domain Extensions (Intel® TDX) introduce architectural elements to help deploy hardware-isolated, virtual machines (VMs) called trust domains (TDs). Intel TDX is designed to isolate VMs from the virtual-machine manager (VMM)/hypervisor and any other non-TD software on the platform to protect TDs from a broad range of software. \r\nThis presentation introduces the architecture for TDX Virtual Firmware (TDVF), and the firmware reference implementation available in open source. The talk covers how TDVF runs from the TD reset vector, records runtime measurements, manages private memory, interacts with the Intel TDX module in Secure Arbitration Mode (SEAM), and loads the operating system (OS). \r\n\r\nThe audience will learn the role TDVF plays in setting up and protecting a TD and how Intel TDX establishes a chain of trust from reset vector to OS handoff.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T21:45:00+01:00","end":"2020-12-03T22:15:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/CRKZB8/resources/Virtual_Firmware_for_Intel_Trust_Domain_Extensions_FhBmbgK.pdf","description":"Presentation"}]},{"code":"GUTWWC","speakers":[{"code":"CF97CT","name":"Michał Żygowski","biography":"Firmware Engineer with networking background. Feels comfortable with low-level development using C/C++ and assembly. Interested in advanced hardware features, security and coreboot. Core developer of coreboot. Maintainer of Braswell SoC, PC Engines, Protectli and Libretrend platforms. Creating open source firmware solution in 3mdeb Embedded Systems Consulting for 3 years. Active speaker at various open source firmware related conferences: Open Source Firmware Conference 2018 and 2019, Xen Developer And Design Summit 2020 and others.","avatar":"https://pretalx.com/media/avatars/miczyg_Kilrn1T.png"},{"code":"D8FJUY","name":"Piotr Król","biography":"Piotr Król is a multi-disciplinary executive running several companies in the embedded systems and semiconductor industries, including 3mdeb, LPN Plant, and Vitro Technology. Prior to starting his own companies, he worked as an engineer for Intel for over seven years. Piotr is also an open-source evangelist, active in the Open Source Firmware (e.g. coreboot) and Linux communities.","avatar":"https://pretalx.com/media/avatars/2000x3000_copped_1_SwXiebO.jpg"}],"title":"TrenchBoot DRTM features for AMD platforms","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"TrenchBoot is a young open source project aiming at security and integrity of\r\nthe boot process leveraging advanced silicon security features, like Intel\r\nTrusted Execution Technology (TXT) and AMD Secure Startup. It integrates with\r\nopen source projects like GRUB2 and Linux to perform a measured launch of the\r\noperating system software, also called Dynamic Root of Trust for Measurement.\r\nThe presentation will describe the progress of the project, what new features\r\nhas been added and what we managed to achieve so far.\r\n\r\nIn particular 3mdeb has been developing support for the AMD Secure Startup.\r\nSince last year we managed to push the project even further thanks to the\r\nfounding from NLnet Foundation, NGI Zero PET grant. The most key changes\r\nintroduced into the project are the DRTM event log and the possibility to boot\r\nXen Hypervisor with measured launch. If you want to hear more what is on our\r\nroadmap and what problems we are still trying to solve, this presentation is\r\nfor you.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T21:45:00+01:00","end":"2020-12-02T22:15:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/GUTWWC/resources/TrenchBoot_DRTM_features_for_AMD_platforms_uGl3cGy.pdf","description":"TrenchBoot DRTM features for AMD platforms"}]},{"code":"RAGN7M","speakers":[{"code":"9HPLTD","name":"Jon Szymaniak","biography":"Jon Szymaniak is Principal Security Consultant in NCC Group’s Hardware & Embedded Security Services practice and is a former embedded systems software engineer. Since joining NCC Group in 2016, Jon has conducted security assessments for a myriad of targets systems, including BMCs, automotive ECUs, Android-based platforms, “smart home” products, and boot ROMs. He is the developer and maintainer of NCC Group’s “Depthcharge” project. His areas of professional focus and personal passion include U-Boot, Linux, Yocto, and firmware reverse engineering.","avatar":"https://pretalx.com/media/avatars/DSC_8714_DViLYnm.JPG"}],"title":"Guiding Engineering Teams Toward a More Secure Usage of U-Boot","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"With its rich feature set, regular release cycle cadence, and adoption into silicon vendors’ board support packages, it is no wonder that the Open Source Das U-Boot bootloader has become so ubiquitous throughout products spanning a breadth of application domains.  However, much of what makes U-Boot so helpful to embedded systems engineers can be a double-edged sword; permissive functionality and readily available reference configurations represent a form of “security debt” that must be paid off by the engineering teams integrating U-Boot into their product.  In both public research and private security assessments, it is commonly found that devices are vulnerable to abuse as a result of product vendors failing to invest adequate time and effort into securing their U-Boot configurations and customizations.\r\n\r\nThis talk will describe common security failure patterns observed during security assessments of products using U-Boot, introduce NCC Group’s “[Depthcharge](https://depthcharge.readthedocs.io)” toolkit built to support U-Boot security auditing, and present its new functionality that is aimed at providing engineering teams with a means to avoid inadvertent inclusion of functionality that may be an ill-fit for their specific security objectives.  At a higher level, this talk aims to foster discussions about how we call all help ensure that product development teams customize, configure, and deploy U-Boot more securely, such that end users remain safe.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T22:30:00+01:00","end":"2020-12-01T23:00:00+01:00"},"image":null,"resources":[]},{"code":"TNTFYV","speakers":[{"code":"8DGVWR","name":"Loo Tung Lun","biography":"Tung Lun is a senior BIOS lead at Intel Corporation focusing on BIOS and bootloader solutions design and power on activities on IOTG platforms. He had successfully brought up BIOS and bootloaders for Apollo Lake, Elkhart Lake, Kaby Lake, Coffee Lake and future Intel IOT platforms. Tung Lun also authored 5 US and WIPO patents. He is appointed as Intel Malaysia Site Innovators Technical and Cultural Advisor.","avatar":null}],"title":"Introducing open firmware development model for the Programmable Service Engine's in Intel Atom x6000E Series","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"The new Intel Atom x6000E series features a Programmable Service Engine (PSE) which supports out-of-band and in-band remote device management; enhanced I/O and storage options; and integrated 2.5 GbE time-sensitive networking. The PSE is based on ARM Cortex-M7. This presentation will focus on the mechanisms by which PSE firmware work with system boot firmware. In addition to that, we will be sharing about the different open source software tools to support the development, integration and design considerations between the PSE firmware and the rest of the system boot firmware. The key benefits from this session is to be able to learn about how to develop and customize the PSE firmware to provide value add for Intel platform.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T16:45:00+01:00","end":"2020-12-02T17:15:00+01:00"},"image":null,"resources":[]},{"code":"AS7EZR","speakers":[{"code":"ARCGMX","name":"Tan Lean Sheng","biography":"Sheng is a firmware engineer working on coreboot and Slim Bootloader projects after joining Intel in 2017. Since then he has developed a keen interest in firmware development and actively involved in open source firmware initiatives . Outside of work Sheng is a tech geek and enjoys playing Frisbee.","avatar":null},{"code":"BJ73UX","name":"Aamir Bohra","biography":"Aamir works as Coreboot FW Engineer at Intel. He is been working on chromebook firmware SoC code development and board bring ups for new generation Intel SoCs . Prior to this , he was working as UEFI BIOS Engineer and was responsible for enabling windows based designs.","avatar":null},{"code":"NEDCUT","name":"Maulik","biography":null,"avatar":"https://pretalx.com/media/avatars/IMG_20190907_202516_EifiWv1.jpg"},{"code":"3VMTMF","name":"Praveen","biography":null,"avatar":null},{"code":"AREPFW","name":"Ronak Kanabar","biography":null,"avatar":null}],"title":"Platform configuration Utility for Intel Platforms","submission_type":{"en":"Session"},"track":null,"state":"confirmed","abstract":"Currently bootloader systems on Intel platforms requires rebuilding of firmware image to change any Platform parameters through static configurations. Using Platform configuration utilities, we want to provide an OS agnostic GUI solution in payload stage, where the users would be able to configure platform settings on runtime on devices directly. This would largely simplify development/validation/debug process, make it faster, user friendly and  provide user much more flexibility. With this on-the-fly functionality, we will able to provide more control to the user without the need for building & flashing the firmware images.","description":null,"duration":40,"slot_count":1,"do_not_record":false,"is_featured":false,"content_locale":"en","slot":{"room":{"en":"Session Area"},"start":"2020-12-03T18:20:00+01:00","end":"2020-12-03T19:00:00+01:00"},"image":null,"resources":[]},{"code":"XTDVXU","speakers":[{"code":"AHQ8TJ","name":"John Looney","biography":"John Looney has been an SRE since 2005, managing most types of large distributed systems for Google and Facebook. He has been teaching people to be an SRE for over ten years, and is on the SRECon steering committee. He is now a Production Engineering manager, supporting the people who deploy firmware and operating systems to Facebook's fleet. He hopes to ensure that Open System Firmware will be firmware, built for SRE by SREs.","avatar":"https://pretalx.com/media/avatars/00100srPORTRAIT_00100_BURST20200904095547247_COVER1_aSbomB1.jpg"}],"title":"Facebook Keynote: Building an alternative ecosystem to UEFI","submission_type":{"en":"Co-Organizer Keynote"},"track":null,"state":"confirmed","abstract":"When Linux, and it's open-source development model became a real alternative to operating systems like Solaris, AIX and Windows in the late 1990s, it became obvious that it would need more than higher quality code to succeed. They needed to defeat the fear, uncertainty, and doubt coming from Redmond, as well as catch up with technologically superior solutions from Palo Alto.\r\n\r\n Deploying open firmware is about building an ecosystem, not just deploying a binary. This talk will present an overview of how Facebook is building that ecosystem, the challenges they have come across along the way. This should be of value to anyone working to effect such large-scale change in their ecosystems.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T19:00:00+01:00","end":"2020-12-01T19:30:00+01:00"},"image":null,"resources":[]},{"code":"MSCLS7","speakers":[{"code":"TMN977","name":"Luke Leighton","biography":"Luke Leighton specialises in Libre Ethical Technology.  His first reverse-engineering was the Windows Network Neighbourhood, and the most recent was the DDR3 DRAM initialisation sequence for the RK3388.  He now designs eco-conscious products and is currently the lead of the Libre-SOC hybrid 3D CPU / GPU SoC.","avatar":null}],"title":"The delicate disadvantage of Reverse-Engineering","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"I started my first reverse-engineering in 1995: NetBIOS \"Network Neighbourhood\" for Samba 1.9.16p5.  I quickly moved on to NT Domains 3.51: \"Welcome to the SAMBA Domain\" and helped bridge the yawning chasm between UNIX and Windows.  By 2003-2004 I had moved on to the Xanadux Project, owned 9 HTC WINCE Smartphones and successfully reverse-engineered Linux onto two of them.\r\n\r\nThen Android happened.  only a few years later, mjg59 published a review of devices and found a 98% GPL Violations rate.\r\n\r\nThis brief talk invites skilled dedicated Libre/Open engineers to consider this rather delicate and simple question: why are we doing this?  Why are we spending vast amounts of time and effort - mostly without being paid - taking 3 months to 3 years to reverse-engineer hardware that was a design concept at least 12 to 18 months before it first hit the shelves?","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":false,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-03T16:15:00+01:00","end":"2020-12-03T16:30:00+01:00"},"image":null,"resources":[]},{"code":"C9FYU3","speakers":[{"code":"K7LB7J","name":"Jens Drenhaus","biography":"Firmware developer at 9elements Cyber Security","avatar":null}],"title":"SystemTransparency and it's bootloader implementation stboot","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"In this talk I want to show the details of System Transparency's bootloader implementation. While the general ideas of System Transparency has been introduced during the last year, this talk will give insights of one of its core components — the stboot bootloader.\r\nAlthough this project is still in its infancy, I will present the state of development. Thereby I provide a look back to early beginnings, the design goals, features that have been added in the course of the last year and recent security improvements. Further, design decisions the project is currently facing will be discussed. Finally, the different deployment scenarios are presented which give detailed information about how to use stboot in individual server fleet setups.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T19:45:00+01:00","end":"2020-12-01T20:15:00+01:00"},"image":null,"resources":[]},{"code":"VUNDSC","speakers":[{"code":"S8HJE9","name":"Guo Dong","biography":"Guo worked on Linux 3 years before he joined in Intel UEFI team (aka Tiano team). After 8 years UEFI engineering development he moved to bootloader firmware development from 2015. He knows well about UEFI EDKII, especially its security features including TCG Trusted Platform Module (TPM), secure boot, user identification (UID), SMM variables, etc. \r\nHe enabled coreboot on several Intel platforms before he created Slim Bootloader with team members. He is also a maintainer for the open sourced UEFI payload in EDKII.","avatar":null},{"code":"HC9SX8","name":"Ravi Rangarajan","biography":null,"avatar":null}],"title":"Standardized payload interface","submission_type":{"en":"Session"},"track":null,"state":"confirmed","abstract":"The design methodology of viewing system firmware functionality as made up of two distinct phases – initialization and OS boot logic is gaining traction resulting in new implementations of system firmware. This approach calls for modular phases with an initialization phase (bootloader) which completes the system initialization and gets the hardware to a usable state and then a payload phase. The payload can provide/implement many different functionalities including the media and file system drivers, operating system boot, diagnostics, etc.  \r\n\r\nThis topic presents the idea of a standardized interface that the bootloader exposes with the design goal of a platform independent payload.","description":null,"duration":40,"slot_count":1,"do_not_record":false,"is_featured":false,"content_locale":"en","slot":{"room":{"en":"Session Area"},"start":"2020-12-03T20:15:00+01:00","end":"2020-12-03T20:55:00+01:00"},"image":null,"resources":[]},{"code":"UU3NBZ","speakers":[{"code":"T7TMMD","name":"Jan Dąbroś","biography":"Jan Dąbroś is an embedded software engineer interested in firmware, hardware and security. \r\nHe is working at the Semihalf - company based in Cracow, Poland. Previously he was working on different firmware projects (both for embedded and server class platforms), including U-Boot, ARM-TF and EDK2. Recently he has engaged in development of the coreboot.","avatar":"https://pretalx.com/media/avatars/Jan_D%C4%85bro%C5%9B_dP6gXw4.jpg"}],"title":"Unit testing coreboot","submission_type":{"en":"long Talk"},"track":null,"state":"confirmed","abstract":"In May 2020, initial support for unit testing the coreboot landed in the tree - it was included in the 4.12 release. The unit testing infrastructure means to help the developers write unit tests in a structured and consistent manner across the whole project. Beside the core build system changes, the patchset comprised documentation with a rationale and test examples. From that time, a couple of new tests were upstreamed together with fixes for the firmware code being tested. Passing unit tests suite is currently one of the requirements for changes to be accepted upstream - this is embedded into the gerrit CI system. \r\n\r\nThis talk will present why and how the coreboot benefits from unit tests. It will also show more details about the implementation and how to build/run tests. Furthermore, the talk is meant to discuss the challenges of unit testing C code (specifically firmware) along with the plans for the future.","description":null,"duration":30,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T21:45:00+01:00","end":"2020-12-01T22:15:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/UU3NBZ/resources/OSFC2020_coreboot_unit_testing_ScVspcR.pdf","description":"coreboot unit testing slides"}]},{"code":"NXKGR3","speakers":[{"code":"K7LB7J","name":"Jens Drenhaus","biography":"Firmware developer at 9elements Cyber Security","avatar":null}],"title":"Opening Event OSFC 2020","submission_type":{"en":"Event Info"},"track":null,"state":"confirmed","abstract":"Opening Event OSFC 2020","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":false,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-01T14:00:00+01:00","end":"2020-12-01T14:15:00+01:00"},"image":null,"resources":[]},{"code":"ZSUPDV","speakers":[{"code":"RSCYCX","name":"Supreeth Venkatesh","biography":"Supreeth Venkatesh works as a System Manageability Architect @ AMD.","avatar":null}],"title":"AMD's Journey towards Open Source OpenBMC firmware","submission_type":{"en":"short Talk"},"track":null,"state":"confirmed","abstract":"This session details AMD’s journey to align with Industry direction of open source firmware stacks. It focuses on the collaborative efforts to enable OpenBMC on AMD customer reference boards and upstream support for AMD system interfaces to enable our customers, partners and BMC vendors. Finally, it highlights how AMD’s OpenBMC engagement quickly enabled a large number of partners to open source AMD specific interfaces.","description":null,"duration":15,"slot_count":1,"do_not_record":false,"is_featured":true,"content_locale":"en","slot":{"room":{"en":"Main Stage"},"start":"2020-12-02T16:15:00+01:00","end":"2020-12-02T16:30:00+01:00"},"image":null,"resources":[{"resource":"/media/osfc2020/submissions/ZSUPDV/resources/OSFC_Presentation_AMDs_Journey_towards_Open_Source_0B69M2b.pdf","description":"Presentation Slide Deck"}]}]}